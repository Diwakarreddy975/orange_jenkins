{"name": "test_getoptions", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: MicrosoftEdge=115.0.1901.203); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00007FF6CAE25422+69586]\n\tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF6CADB5662+760226]\n\t(No symbol) [0x00007FF6CAB6B8CC]\n\t(No symbol) [0x00007FF6CAB70569]\n\t(No symbol) [0x00007FF6CAB7282D]\n\t(No symbol) [0x00007FF6CAB72920]\n\t(No symbol) [0x00007FF6CABAD29E]\n\t(No symbol) [0x00007FF6CABD2DAA]\n\t(No symbol) [0x00007FF6CABA6A11]\n\t(No symbol) [0x00007FF6CABA68BD]\n\t(No symbol) [0x00007FF6CABD30E0]\n\t(No symbol) [0x00007FF6CABA6A11]\n\t(No symbol) [0x00007FF6CABEC241]\n\t(No symbol) [0x00007FF6CABD2B83]\n\t(No symbol) [0x00007FF6CABA589E]\n\t(No symbol) [0x00007FF6CABA4B6B]\n\t(No symbol) [0x00007FF6CABA6024]\n\tMicrosoft::Applications::Events::ILogManager::DispatchEventBroadcast [0x00007FF6CAFFD229+1294553]\n\t(No symbol) [0x00007FF6CAC249F4]\n\tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF6CAD03DF1+33073]\n\tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF6CACFC409+1865]\n\tMicrosoft::Applications::Events::ILogManager::DispatchEventBroadcast [0x00007FF6CAFFBE01+1289393]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6CADBDC68+20184]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6CADBA2F4+5476]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6CADBA3EC+5724]\n\tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF6CADAECA1+733153]\n\tBaseThreadInitThunk [0x00007FFAACE626AD+29]\n\tRtlUserThreadStart [0x00007FFAAEDCAA68+40]", "trace": "self = <tests.test_requirment.Test_Requirment object at 0x0000021A1C3AFB90>\n\n    def test_getoptions(self):\n        reqPOM = RequirmentPOM(self.driver)\n        logpom = LoginPOM(self.driver)\n        homepage = HomepagePOM(self.driver)\n        logpom.enter_text_in_username(\"Admin\")\n        logpom.enter_password_in_password_field(\"admin123\")\n        logpom.click_on_login_button()\n        time.sleep(3)\n        homepage.click_Requirtment_menu()\n        reqPOM.job_title_dropdown_option_select(\"HR Manager\")\n        reqPOM.vacancy_dropdown_option_select(\"Sales Representative\")\n>       reqPOM.hiringManager_dropdown_option_select(\"Dominic Chase\")\n\ntests\\test_requirment.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\pageclass\\requirtmentPOM.py:59: in hiringManager_dropdown_option_select\n    print(option.text)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:90: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021A1C785650>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...DAECA1+733153]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAACE626AD+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFAAEDCAA68+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: MicrosoftEdge=115.0.1901.203); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00007FF6CAE25422+69586]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF6CADB5662+760226]\nE       \t(No symbol) [0x00007FF6CAB6B8CC]\nE       \t(No symbol) [0x00007FF6CAB70569]\nE       \t(No symbol) [0x00007FF6CAB7282D]\nE       \t(No symbol) [0x00007FF6CAB72920]\nE       \t(No symbol) [0x00007FF6CABAD29E]\nE       \t(No symbol) [0x00007FF6CABD2DAA]\nE       \t(No symbol) [0x00007FF6CABA6A11]\nE       \t(No symbol) [0x00007FF6CABA68BD]\nE       \t(No symbol) [0x00007FF6CABD30E0]\nE       \t(No symbol) [0x00007FF6CABA6A11]\nE       \t(No symbol) [0x00007FF6CABEC241]\nE       \t(No symbol) [0x00007FF6CABD2B83]\nE       \t(No symbol) [0x00007FF6CABA589E]\nE       \t(No symbol) [0x00007FF6CABA4B6B]\nE       \t(No symbol) [0x00007FF6CABA6024]\nE       \tMicrosoft::Applications::Events::ILogManager::DispatchEventBroadcast [0x00007FF6CAFFD229+1294553]\nE       \t(No symbol) [0x00007FF6CAC249F4]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF6CAD03DF1+33073]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF6CACFC409+1865]\nE       \tMicrosoft::Applications::Events::ILogManager::DispatchEventBroadcast [0x00007FF6CAFFBE01+1289393]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6CADBDC68+20184]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6CADBA2F4+5476]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6CADBA3EC+5724]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF6CADAECA1+733153]\nE       \tBaseThreadInitThunk [0x00007FFAACE626AD+29]\nE       \tRtlUserThreadStart [0x00007FFAAEDCAA68+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: StaleElementReferenceException"}, "attachments": [{"name": "stdout", "source": "985834be-fb34-42a2-8c84-2ad0ae5507b9-attachment.txt", "type": "text/plain"}], "start": 1692179586866, "stop": 1692179601221, "uuid": "465b9881-ee7d-450b-accd-690a0b7f99b9", "historyId": "1603ecdd17d8414edb1b9cd83e027cc4", "testCaseId": "1603ecdd17d8414edb1b9cd83e027cc4", "fullName": "tests.test_requirment.Test_Requirment#test_getoptions", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_requirment"}, {"name": "subSuite", "value": "Test_Requirment"}, {"name": "host", "value": "LAPTOP-G7C1HNTH"}, {"name": "thread", "value": "25148-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_requirment"}]}